diff --git a/includes/ft_ping.h b/includes/ft_ping.h
index d6ac60d..e462a44 100644
--- a/includes/ft_ping.h
+++ b/includes/ft_ping.h
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/14 12:53:58 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:18:06 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 12:05:59 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -42,9 +42,23 @@
 # define DEFAULT_TIMEOUT 1
 # define DEFAULT_DELAY 1.0
 # define TTL_DEFAULT 64
+# define SEND_ERROR "ERROR SEND ERROR\n"
+# define RECV_ERROR "ERROR RECV ERROR\n"
+# define REQUEST_OK "OK\n"
+# define REQUEST_ERROR "ERROR\n"
+# define CLOSE_ERROR "ERROR ON CLOSE\n"
+# define OPEN_ERROR "ERROR NO SUCH FILE OR DIRECTORY\n"
+# define OOM_DEVICE "ERROR NO SPACE LEFT ON DEVICE\n"
+# define PIPE_ERR "ERROR ON PIPE\n"
+# define FORK_ERR "ERROR ON FORK\n"
+# define CLOSE_ERR "ERROR ON CLOSE\n"
+# define EXECV_ERR "ERROR ON EXECV\n"
+# define READ_ERR "ERROR ON READ\n"
+# define BIND_ERROR "ERROR BIND ERROR\n"
+# define SOCKET_ERROR "ERROR SOCKET ERROR\n"
 # define ERROR_CODE -1
-# define PORT_TMP 12
-# define OPT_STR "cdinqsStTvwWh"
+#define PORT_TMP 12
+#define OPT_STR "cdinqsStTvwWh"
 
 enum {
 	COUNT = (1 << 0),
@@ -62,18 +76,18 @@ enum {
 	HELP = (1 << 12)
 };
 
-typedef struct timeval		t_timeval;
-typedef struct timezone		t_timezone;
-typedef struct sockaddr		t_sockaddr;
+typedef struct timeval	t_timeval;
+typedef struct timezone	t_timezone;
+typedef struct sockaddr	t_sockaddr;
 typedef struct sockaddr6	t_sockaddr6;
 typedef struct sockaddr_in6	t_sockaddr_in6;
 typedef struct sockaddr_in	t_sockaddr_in;
-typedef struct protoent		t_protoent;
-typedef struct ip			t_ip;
-typedef struct tcphdr		t_tcphdr;
-typedef struct icmphdr		t_icmphdr;
-typedef struct hostent		t_hostent;
-typedef struct addrinfo		t_addrinfo;
+typedef struct protoent	t_protoent;
+typedef struct ip	t_ip;
+typedef struct tcphdr t_tcphdr;
+typedef struct icmphdr t_icmphdr;
+typedef struct hostent t_hostent;
+typedef struct addrinfo	t_addrinfo;
 int				ip_version(const char *src);
 
 typedef struct	s_packet
@@ -82,7 +96,7 @@ typedef struct	s_packet
 	char		msg[PACKET_SIZE_DEFAULT - sizeof(t_icmphdr)];
 }				t_packet;
 
-typedef struct	s_packet_stat
+typedef struct s_packet_stat
 {
 	int		size;
 	int		send;
@@ -92,10 +106,10 @@ typedef struct	s_packet_stat
 	int		sndbuff;
 }				t_packet_stat;
 
-typedef struct	s_time_stat
+typedef struct s_time_stat
 {
-	t_timeval			start;
-	t_timeval			current;
+	t_timeval	start;
+	t_timeval	current;
 	long double			intervale;
 	long double			delay;
 	long double			min;
@@ -112,7 +126,7 @@ typedef struct	s_time_stat
 typedef struct	s_ping
 {
 	t_sockaddr		*sockaddr;
-	t_addrinfo		*host_entity;
+	t_addrinfo		*host_entity; 
 	t_packet		packet;
 	t_packet_stat	pstat;
 	t_time_stat		tstat;
diff --git a/libft/includes/libft.h b/libft/includes/libft.h
index 09f04e1..05b82bc 100644
--- a/libft/includes/libft.h
+++ b/libft/includes/libft.h
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2017/11/11 15:23:29 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:21:57 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/15 18:04:25 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -206,12 +206,11 @@ int				is_directory_str(char *name);
 int				is_regular_file(int fd);
 int				ft_swap_int(int num);
 int				ft_getopt(int ac, char *av[], const char *optst, int *nb);
-int				ft_getoptvalue(int ac, char *av[],
-								const char *optst, char **opts);
+int				ft_getoptvalue(int ac, char *av[], const char *optst, char **opts);
 int				ft_islower(int c);
 int				ft_isupper(int c);
 int				ft_exit(char *str, int code);
 
-double			ft_std(double *array, int len);
-double			ft_mean(double *array, int len);
+double	ft_std(double *array, int len);
+double	ft_mean(double *array, int len);
 #endif
diff --git a/libft/src/math/ft_mean.c b/libft/src/math/ft_mean.c
index 7710f26..fc81000 100644
--- a/libft/src/math/ft_mean.c
+++ b/libft/src/math/ft_mean.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 15:08:27 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:22:31 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/15 15:17:10 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,8 +14,8 @@
 
 double	ft_mean(double *array, int len)
 {
-	int			i;
-	long double	sum;
+	int	i;
+	long double sum;
 
 	i = len;
 	sum = 0.0;
diff --git a/libft/src/math/ft_sqrt.c b/libft/src/math/ft_sqrt.c
index 1592466..7159a7d 100644
--- a/libft/src/math/ft_sqrt.c
+++ b/libft/src/math/ft_sqrt.c
@@ -6,25 +6,26 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 15:16:47 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:24:11 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/15 16:46:30 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "libft.h"
 
-double	ft_sqrt(double n)
+double ft_sqrt(double n)
 {
 	double	x;
 	double	x0;
 	double	delta;
 
+
 	x0 = n;
 	while (1)
 	{
 		x = x0 - (x0 * x0 - n) / (2 * x0);
 		delta = (x - x0) / x0;
-		if (delta < 0.000001 && delta > -0.000001)
-			return (x);
+		if (delta < .000001 && delta > -.000001)
+			return x;
 		x0 = x;
 	}
 	return (1.0);
diff --git a/libft/src/math/ft_std.c b/libft/src/math/ft_std.c
index a284929..8040ac9 100644
--- a/libft/src/math/ft_std.c
+++ b/libft/src/math/ft_std.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 15:32:43 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:23:35 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/15 15:33:03 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,10 +14,10 @@
 
 double	ft_std(double *array, int len)
 {
-	double	sum;
+	int	i;
+	double sum;
 	double	std;
-	int		mean;
-	int		i;
+	int	mean;
 
 	i = len;
 	sum = 0.0;
diff --git a/libft/src/parsing/ft_getoptvalue.c b/libft/src/parsing/ft_getoptvalue.c
index 207f8d2..d6cf88f 100644
--- a/libft/src/parsing/ft_getoptvalue.c
+++ b/libft/src/parsing/ft_getoptvalue.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 16:58:45 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:24:26 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/15 21:04:26 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -36,7 +36,7 @@ int		ft_getoptvalue(int argc, char *argv[],
 			}
 		}
 		else
-			opts[last] = argv[i];
+			opts[last] = argv[i] ;
 	}
 	return (ret);
 }
diff --git a/src/checksum.c b/src/checksum.c
index 495fe48..07cc77c 100644
--- a/src/checksum.c
+++ b/src/checksum.c
@@ -6,17 +6,17 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/14 15:48:47 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 15:53:18 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 11:46:09 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "ft_ping.h"
 
-unsigned short	checksum(void *b, int len)
+unsigned short checksum(void *b, int len)
 {
-	unsigned short	*buf;
-	unsigned int	sum;
-	unsigned short	result;
+	unsigned short *buf;
+	unsigned int sum;
+	unsigned short result;
 
 	sum = 0;
 	buf = b;
@@ -32,3 +32,4 @@ unsigned short	checksum(void *b, int len)
 	result = ~sum;
 	return (result);
 }
+
diff --git a/src/main.c b/src/main.c
index 8ea62dd..8c199b5 100644
--- a/src/main.c
+++ b/src/main.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/14 11:11:27 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 15:58:41 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 12:22:33 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -23,61 +23,59 @@ void	stop_loop(int signal)
 	exit(1);
 }
 
-int		usage(int ac, char **av)
+int	usage(int ac, char **av)
 {
 	(void)av;
 	if (ac < 2)
 	{
 		ft_printf("Please give me an address and (maybe) a port\n");
-		return (1);
+		return 1;
 	}
-	return (0);
+	return 0;
 }
 
-void	ft_ping(t_ping *ping)
-{
-	set_packet(&ping->packet, ping);
-	ping_send(&ping->packet, ping->socket, ping);
-	intervale();
-	ping_receive(ping->socket, ping);
-	ping->tstat.intervale = intervale();
-	wait_for(ping->tstat.delay);
-	if (!(ping->opt & QUIET))
-		print_ping(ping);
-	ping->pstat.count++;
-	set_time_stat(ping);
-}
 
-int		ping_loop(t_ping *ping)
+int	ping_loop(t_ping *ping)
 {
-	struct timeval tv_out;
+	struct timeval tv_out; 
+	tv_out.tv_sec = ping->tstat.timeout; 
+	tv_out.tv_usec = 0; 
+
 
-	tv_out.tv_sec = ping->tstat.timeout;
-	tv_out.tv_usec = 0;
 	if (setsockopt(ping->socket, SOL_IP, IP_TTL,
 				&ping->tstat.ttl, sizeof(int)) != 0)
-	{
+	{ 
 		ft_printf("\nSetting socket options  TTL failed!\n");
-		return (1);
-	}
+		return 1; 
+	} 
 	setsockopt(ping->socket, SOL_SOCKET, SO_RCVTIMEO,
-			(const char*)&tv_out, sizeof(tv_out));
+			(const char*)&tv_out, sizeof tv_out);
 	gettimeofday(&ping->tstat.start, 0);
 	while (1)
 	{
-		ft_ping(ping);
+		set_packet(&ping->packet, ping);
+		ping_send(&ping->packet, ping->socket, ping);
+		intervale();
+		ping_receive(ping->socket, ping);
+		ping->tstat.intervale = intervale();
+		wait_for(ping->tstat.delay);
+		if (!(ping->opt & QUIET))
+			print_ping(ping);
+		ping->pstat.count++;
+		set_time_stat(ping);
 	}
 	return (1);
 }
 
-int		main(int ac, char **av)
+
+int	main(int ac, char **av)
 {
 	t_ping	ping;
 
 	g_ping = &ping;
 	ft_bzero(&ping, sizeof(t_ping));
 	if (usage(ac, av))
-		return (1);
+		return 1;
 	ping.opt = ft_getoptvalue(ac, av, OPT_STR, ping.opt_tab);
 	if (ping.opt & HELP)
 	{
@@ -87,7 +85,7 @@ int		main(int ac, char **av)
 	ping_ctor(&ping);
 	ping.host_name = av[1];
 	if ((ping.socket = check_addr(&ping)) == ERROR_CODE)
-		return (EXIT_FAILURE);
+		return EXIT_FAILURE;
 	signal(SIGINT, stop_loop);
 	print_summary(&ping);
 	ping_loop(&ping);
diff --git a/src/packet.c b/src/packet.c
index 092bc30..54a0ec6 100644
--- a/src/packet.c
+++ b/src/packet.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/14 15:45:55 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:00:05 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 11:47:01 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,17 +14,16 @@
 
 int		set_packet(t_packet *pckt, t_ping *ping)
 {
-	static int	msg_count = 0;
-	int			i;
+	static int msg_count = 0;
+	int	i;
 
-	i = -1;
 	ft_bzero(pckt, sizeof(t_packet));
 	pckt->hdr.type = ICMP_ECHO;
 	pckt->hdr.un.echo.id = getpid();
-	while (++i < ping->pstat.size - 1)
+	for (i = 0; i < ping->pstat.size - 1; i++)
 		pckt->msg[i] = i + '0';
 	pckt->msg[i] = 0;
 	pckt->hdr.un.echo.sequence = msg_count++;
-	pckt->hdr.checksum = checksum(pckt, sizeof(t_packet));
+	pckt->hdr.checksum  = checksum(pckt, sizeof(t_packet));
 	return (1);
 }
diff --git a/src/ping.c b/src/ping.c
index 5a8f124..dd5b00a 100644
--- a/src/ping.c
+++ b/src/ping.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/13 15:53:58 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:01:37 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 11:47:16 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -17,7 +17,7 @@ int		ping_send(t_packet *pckt, int socket, t_ping *ping)
 	if (sendto(socket, pckt,
 				sizeof(t_packet),
 				0, (t_sockaddr*)ping->sockaddr,
-				ping->sockaddr_len) <= 0)
+				ping->sockaddr_len ) <= 0)
 	{
 		ft_exit("connect: invalid argument", 1);
 		return (ERROR_CODE);
@@ -27,21 +27,21 @@ int		ping_send(t_packet *pckt, int socket, t_ping *ping)
 }
 
 /*
-** struct iovec {                     Scatter/gather array items
-** void  *iov_base;               Starting address
-** size_t iov_len;                Number of bytes to transfer
-** };
-**
-** struct msghdr {
-** void         *msg_name;        optional address
-** socklen_t     msg_namelen;     size of address
-** struct iovec *msg_iov;         scatter/gather array
-** size_t        msg_iovlen;      # elements in msg_iov
-** void         *msg_control;     ancillary data, see below
-** size_t        msg_controllen;  ancillary data buffer len
-** int           msg_flags;       flags on received message
-** };
-*/
+   struct iovec {                     Scatter/gather array items
+   void  *iov_base;               Starting address
+   size_t iov_len;                Number of bytes to transfer
+   };
+
+   struct msghdr {
+   void         *msg_name;        optional address
+   socklen_t     msg_namelen;     size of address
+   struct iovec *msg_iov;         scatter/gather array
+   size_t        msg_iovlen;      # elements in msg_iov
+   void         *msg_control;     ancillary data, see below
+   size_t        msg_controllen;  ancillary data buffer len
+   int           msg_flags;       flags on received message
+   };
+   */
 
 int		ping_receive(int sockfd, t_ping *ping)
 {
@@ -53,11 +53,13 @@ int		ping_receive(int sockfd, t_ping *ping)
 	ft_bzero(&msg, sizeof(msg));
 	ft_bzero(&iov, sizeof(iov));
 	iov[0].iov_base = buffer;
-	iov[0].iov_len = sizeof(buffer);
+	iov[0].iov_len  = sizeof(buffer);
 	msg.msg_name = ping->sockaddr;
 	msg.msg_namelen = ping->sockaddr_len;
-	msg.msg_iov = iov;
-	msg.msg_iovlen = 1;
+	msg.msg_iov     = iov;
+	msg.msg_iovlen  = 1;
+	/* msg.msg_accrights    = (char *)&pass_sd; */
+	/* msg.msg_accrightslen = sizeof(pass_sd); */
 	if (recvmsg(sockfd, &msg, MSG_WAITALL) < 0)
 	{
 		ft_printf("Packet receive failed!\n");
diff --git a/src/print.c b/src/print.c
index fb63ee2..3411414 100644
--- a/src/print.c
+++ b/src/print.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/13 15:56:47 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:03:33 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 12:24:26 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -14,11 +14,11 @@
 
 int	print_ping(t_ping *ping)
 {
-	printf("%ld bytes from ", sizeof(t_packet));
+	printf ("%ld bytes from ", sizeof(t_packet));
 	if (ping->opt & NUMERIC)
 		printf("%s:", ping->host_addr);
 	else
-		printf("%s (%s):", ping->dns_addr, ping->host_addr);
+		printf("%s (%s):",ping->dns_addr, ping->host_addr);
 	printf(" icmp_seq=%d ttl=%d time=%.2Lf ms\n",  \
 			ping->pstat.count + 1,
 			ping->tstat.ttl, ping->tstat.intervale);
@@ -28,22 +28,20 @@ int	print_ping(t_ping *ping)
 int	print_stat(t_ping *ping)
 {
 	printf("\n--- %s ping statistics ---\n", ping->host_entity->ai_canonname);
-	printf("%d packets transmitted, %d received,"
-			" %d%% packet loss, time %.0Lf ms\n",
+	printf("%d packets transmitted, %d received, %d%% packet loss, time %.0Lf ms\n",
 			ping->pstat.send, ping->pstat.rcv,
-			(int)(((double)(ping->pstat.send
-						- ping->pstat.rcv) / ping->pstat.count) * 100),
+			(int)(((double)(ping->pstat.send - ping->pstat.rcv) / ping->pstat.count) * 100),
 			ping->tstat.all);
 	printf("rtt min/avg/max/mdev = %.3Lf/%.3Lf/%.3Lf/%.3Lf ms\n",
-			ping->tstat.min, ping->tstat.avg,
-			ping->tstat.max, ping->tstat.mdev);
+		ping->tstat.min, ping->tstat.avg, ping->tstat.max, ping->tstat.mdev);
 	return (1);
 }
 
 int	print_summary(t_ping *ping)
 {
+
 	printf("PING %s (%s) %ld(%d) bytes of data.\n",
-			ping->host_entity->ai_canonname, ping->host_addr,
-			sizeof(t_packet), ping->pstat.size);
+	ping->host_entity->ai_canonname, ping->host_addr, sizeof(t_packet), ping->pstat.size);
 	return (1);
 }
+
diff --git a/src/set_socket.c b/src/set_socket.c
index d8f1977..d3995b0 100644
--- a/src/set_socket.c
+++ b/src/set_socket.c
@@ -6,30 +6,31 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/05 12:21:09 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:06:25 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 12:06:29 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "ft_ping.h"
 
-int		set_socket(int is_ipv4)
+int				set_socket(int is_ipv4)
 {
 	int			sock;
 
 	if ((sock = socket(is_ipv4 ? AF_INET
-					: AF_INET6, SOCK_RAW, IPPROTO_ICMP)) < -1)
+		: AF_INET6, SOCK_RAW, IPPROTO_ICMP)) < -1)
 		ft_exit(SOCKET_ERROR, EXIT_FAILURE);
 	return (sock);
 }
 
+
 int		reverse_dns_lookup(t_ping *ping)
 {
-	char	service[1024];
+	char service[1024];
 
 	ft_bzero(service, sizeof(service));
-	if (getnameinfo(ping->host_entity->ai_addr,
-				ping->host_entity->ai_addrlen, ping->dns_addr, NI_MAXHOST,
-				service, sizeof(service), NI_NAMEREQD))
+    if (getnameinfo(ping->host_entity->ai_addr,
+	ping->host_entity->ai_addrlen, ping->dns_addr, NI_MAXHOST,
+   	service, sizeof(service), NI_NAMEREQD))  
 	{
 		printf("connect: Invalid argument\n");
 		return (ERROR_CODE);
@@ -37,7 +38,7 @@ int		reverse_dns_lookup(t_ping *ping)
 	return (1);
 }
 
-int		create_socket(t_ping *ping, int is_ipv4)
+int	create_socket(t_ping *ping, int is_ipv4)
 {
 	int				sock;
 	int				reuseaddr;
@@ -48,8 +49,8 @@ int		create_socket(t_ping *ping, int is_ipv4)
 	ft_bzero(&sin2, sizeof(sin2));
 	ft_bzero(&sin, sizeof(sin));
 	sock = set_socket(is_ipv4);
-	setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO
-			| ((ping->opt & DEBUG) * SO_DEBUG), &reuseaddr, sizeof(reuseaddr));
+	setsockopt(sock, SOL_SOCKET, SO_RCVTIMEO 
+| ((ping->opt & DEBUG)  * SO_DEBUG) , &reuseaddr, sizeof(reuseaddr));
 	ping->sockaddr = ping->host_entity->ai_addr;
 	ping->sockaddr_len = ping->host_entity->ai_addrlen;
 	return (sock);
@@ -68,18 +69,19 @@ int		create_socket(t_ping *ping, int is_ipv4)
 **     };
 */
 
-int		check_addr(t_ping *ping)
+
+int	check_addr(t_ping *ping)
 {
-	t_addrinfo	tmp;
-	void		*ptr;
-	int			is_ipv4;
+	t_addrinfo tmp;
+	void	*ptr;
+	int		is_ipv4;
 
 	ft_bzero(&tmp, sizeof(tmp));
 	tmp.ai_family = PF_UNSPEC;
 	tmp.ai_socktype = SOCK_RAW;
 	tmp.ai_flags |= AI_CANONNAME;
 	if (getaddrinfo(ping->host_name, NULL,
-				&tmp, &ping->host_entity) != 0)
+		&tmp, &ping->host_entity) != 0)
 	{
 		printf("ping: Name or Service not known\n");
 		return (ERROR_CODE);
@@ -87,7 +89,7 @@ int		check_addr(t_ping *ping)
 	ptr = &((t_sockaddr_in*)ping->host_entity->ai_addr)->sin_addr;
 	is_ipv4 = ping->host_entity->ai_family == PF_INET;
 	inet_ntop(ping->host_entity->ai_family, ptr,
-			ping->host_addr, 100);
+  ping->host_addr, 100);
 	if (reverse_dns_lookup(ping) == ERROR_CODE)
 		return (ERROR_CODE);
 	return (create_socket(ping, is_ipv4));
diff --git a/src/setopt.c b/src/setopt.c
index 194dfaf..aa7ae6f 100644
--- a/src/setopt.c
+++ b/src/setopt.c
@@ -6,7 +6,7 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 16:27:10 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:07:40 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/16 14:16:26 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -19,7 +19,7 @@
 void	set_ttl(t_ping *ping, char *value)
 {
 	if (ft_atoi(value) > 255)
-		return ;
+		return;
 	ping->tstat.ttl = ft_atoi(value);
 }
 
@@ -36,11 +36,13 @@ void	set_sndbuff(t_ping *ping, char *value)
 ** -s
 */
 
+
 void	set_packetsize(t_ping *ping, char *value)
 {
 	ping->pstat.size = ft_atoi(value);
 }
 
+
 /*
 ** -c
 */
@@ -63,3 +65,5 @@ void	set_intervale(t_ping *ping, char *value)
 {
 	ping->tstat.delay = atof(value);
 }
+
+
diff --git a/src/setopt2.c b/src/setopt2.c
index aa4f765..53ed19a 100644
--- a/src/setopt2.c
+++ b/src/setopt2.c
@@ -6,10 +6,11 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/15 17:45:19 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:09:26 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/16 15:49:06 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
+
 #include "ft_ping.h"
 
 /*
@@ -32,28 +33,25 @@ void	set_timeout(t_ping *ping, char *value)
 
 void	display_help(t_ping *ping, char *value)
 {
-	char *usage;
-
 	(void)ping;
 	(void)value;
-	usage = "Usage: ping [-cqditdw] [-c count]"
-	" [-i interval] [-t ttl] [-w deadline] destination";
+	char *usage = "Usage: ping [-cqditdw] [-c count] [-i interval] [-t ttl] [-w deadline] destination";
 	printf("%s\n", usage);
 }
 
 void	func_tab(t_ping *ping)
 {
-	int		i;
-	int		index;
+	int i;
+	int	index;
 	void	(*f[16])(t_ping *p, char *);
 
-	f[ft_strlento(OPT_STR, 't')] = set_ttl;
-	f[ft_strlento(OPT_STR, 's')] = set_packetsize;
-	f[ft_strlento(OPT_STR, 'S')] = set_sndbuff;
-	f[ft_strlento(OPT_STR, 'c')] = set_countmax;
-	f[ft_strlento(OPT_STR, 'w')] = set_deadline;
-	f[ft_strlento(OPT_STR, 'W')] = set_timeout;
-	f[ft_strlento(OPT_STR, 'h')] = display_help;
+	f[ft_strlento(OPT_STR,'t')] = set_ttl;
+	f[ft_strlento(OPT_STR,'s')] = set_packetsize;
+	f[ft_strlento(OPT_STR,'S')] =  set_sndbuff;
+	f[ft_strlento(OPT_STR,'c')] = set_countmax;
+	f[ft_strlento(OPT_STR,'w')] = set_deadline;
+	f[ft_strlento(OPT_STR,'W')] = set_timeout;
+	f[ft_strlento(OPT_STR,'h')] = display_help;
 	f[(int)ft_sqrt(INTERVALE)] = set_intervale;
 	i = 1;
 	index = 0;
diff --git a/src/time.c b/src/time.c
index db16665..6e395de 100644
--- a/src/time.c
+++ b/src/time.c
@@ -6,37 +6,36 @@
 /*   By: ygarrot <marvin@42.fr>                     +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2019/03/13 14:49:30 by ygarrot           #+#    #+#             */
-/*   Updated: 2019/04/29 16:15:08 by ygarrot          ###   ########.fr       */
+/*   Updated: 2019/03/17 11:49:12 by ygarrot          ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
 #include "ft_ping.h"
 
 /*
-** struct timeval {
-**     time_t      tv_sec;      seconds
-**     suseconds_t tv_usec;     microseconds
-** };
-**
-** struct timezone {
-**     int tz_minuteswest;      minutes west of Greenwich
-**     int tz_dsttime;          type of DST correction
-** };
-** The tz_dsttime field has never been used under Linux.
-** Thus, the following is purely of historic interest.
+struct timeval {
+    time_t      tv_sec;      seconds
+    suseconds_t tv_usec;     microseconds
+};
+
+struct timezone {
+    int tz_minuteswest;      minutes west of Greenwich
+    int tz_dsttime;          type of DST correction
+};
+The tz_dsttime field has never been used under Linux. Thus, the following is purely of historic interest.
 */
 
-double	timeval_to_double(t_timeval last_time, t_timeval current_time)
+double timeval_to_double(t_timeval last_time, t_timeval current_time)
 {
 	double intervale;
 
 	intervale = (double)(current_time.tv_sec - last_time.tv_sec) * 1000.0;
 	intervale += (double)(current_time.tv_usec - last_time.tv_usec)
-		/ 1000.0;
+	  / 1000.0 ;
 	return (intervale);
 }
 
-double	intervale(void)
+double intervale(void)
 {
 	static t_timeval	last_time = {0.0, 0.0};
 	t_timeval			current_time;
@@ -51,13 +50,12 @@ double	intervale(void)
 
 int		set_time_stat(t_ping *ping)
 {
-	static double	std_sum = 0.0;
-	t_time_stat		time;
+	static	double std_sum = 0.0;
+	t_time_stat time;
 
 	time = ping->tstat;
 	ping->tstat.max = time.intervale > time.max ? time.intervale : time.max;
-	ping->tstat.min = time.min && (time.intervale > time.min) ?
-									time.min : time.intervale;
+	ping->tstat.min = time.min && (time.intervale > time.min) ? time.min : time.intervale;
 	ping->tstat.avg = time.all / time.count;
 	std_sum += ft_power(time.intervale - time.avg, 2);
 	if (time.count > 0 && std_sum > 0)
@@ -66,18 +64,18 @@ int		set_time_stat(t_ping *ping)
 	ping->tstat.all += time.intervale;
 	gettimeofday(&ping->tstat.current, 0);
 	if (time.deadline > 0
-			&& timeval_to_double(time.start, time.current) >= time.deadline)
+	&& timeval_to_double(time.start, time.current) >= time.deadline)
 		stop_loop(2);
 	if (ping->pstat.count_max > 0 && ping->pstat.count_max < ping->tstat.count)
 		stop_loop(2);
 	return (1);
 }
 
-int		wait_for(double sec)
+int wait_for (double sec)
 {
 	t_timeval			current_time;
-	double				done;
-	double				current;
+	double done;
+	double current;
 
 	current = 0.0;
 	if (gettimeofday(&current_time, 0) == ERROR_CODE)
